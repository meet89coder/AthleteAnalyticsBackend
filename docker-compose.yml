version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: athlete-analytics-db
    environment:
      POSTGRES_DB: athlete_analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - athlete-network

  # Redis (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: athlete-analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - athlete-network

  # Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: athlete-analytics-api
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://postgres:password@postgres:5432/athlete_analytics
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: athlete_analytics
      DB_USER: postgres
      DB_PASSWORD: password
      JWT_SECRET: production-jwt-secret-change-this-in-real-deployment
      JWT_EXPIRES_IN: 24h
      BCRYPT_ROUNDS: 12
      LOG_LEVEL: info
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - athlete-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: athlete-analytics-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./ssl:/etc/ssl/certs:ro  # For SSL certificates
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - athlete-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  athlete-network:
    driver: bridge